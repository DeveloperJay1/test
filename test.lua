-- Roblox-kompatibler Base64-Decoder
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local s='LS0gUmF5ZmllbGQgVUkgU2NyaXB0Ci0tIFZlcnNpb24gMS4wCi0tIEVudHdpY2tlbHQgZsO8ciBkaWUgbWVpc3RlbiBSb2Jsb3gtU3BpZWxlCgpsb2NhbCBSYXlmaWVsZCA9IGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCdodHRwczovL3Npcml1cy5tZW51L3JheWZpZWxkJykpKCkKCi0tIEhhdXB0ZmVuc3RlciBlcnN0ZWxsZW4KbG9jYWwgV2luZG93ID0gUmF5ZmllbGQ6Q3JlYXRlV2luZG93KHsKICAgIE5hbWUgPSAiUHJlbWl1bSBIdWIgfCB2MS4wIiwKICAgIExvYWRpbmdUaXRsZSA9ICJQcmVtaXVtIEV4cGVyaWVuY2UiLAogICAgTG9hZGluZ1N1YnRpdGxlID0gImJ5IEV4cGVydCBEZXZlbG9wZXJzIiwKICAgIENvbmZpZ3VyYXRpb25TYXZpbmcgPSB7CiAgICAgICAgRW5hYmxlZCA9IHRydWUsCiAgICAgICAgRm9sZGVyTmFtZSA9ICJQcmVtaXVtSHViQ29uZmlnIiwKICAgICAgICBGaWxlTmFtZSA9ICJTZXR0aW5ncy5qc29uIgogICAgfSwKICAgIERpc2NvcmQgPSB7CiAgICAgICAgRW5hYmxlZCA9IHRydWUsCiAgICAgICAgSW52aXRlID0gImRpc2NvcmQuZ2cvZXhhbXBsZXNlcnZlciIsCiAgICAgICAgUmVtZW1iZXJKb2lucyA9IHRydWUKICAgIH0sCiAgICBLZXlTeXN0ZW0gPSB0cnVlLAogICAgS2V5U2V0dGluZ3MgPSB7CiAgICAgICAgVGl0bGUgPSAiUHJlbWl1bSBIdWIiLAogICAgICAgIFN1YnRpdGxlID0gIktleSBTeXN0ZW0iLAogICAgICAgIE5vdGUgPSAiSm9pbiB0aGUgRGlzY29yZCBmb3Iga2V5IiwKICAgICAgICBGaWxlTmFtZSA9ICJQcmVtaXVtSHViS2V5IiwKICAgICAgICBTYXZlS2V5ID0gdHJ1ZSwKICAgICAgICBHcmFiS2V5RnJvbVNpdGUgPSBmYWxzZSwKICAgICAgICBLZXkgPSAiUFJFTUlVTTEyMyIKICAgIH0KfSkKCi0tIFRhYnMgZXJzdGVsbGVuCmxvY2FsIE1haW5UYWIgPSBXaW5kb3c6Q3JlYXRlVGFiKCJNYWluIiwgNDQ4MzM2MjQ1OCkgLS0gSGF1cy1JY29uCmxvY2FsIENvbWJhdFRhYiA9IFdpbmRvdzpDcmVhdGVUYWIoIkNvbWJhdCIsIDc3MzM5NjA5ODEpIC0tIFNjaHdlcnQtSWNvbgpsb2NhbCBQbGF5ZXJUYWIgPSBXaW5kb3c6Q3JlYXRlVGFiKCJQbGF5ZXIiLCA5NzUzNzYyNDY5KSAtLSBBdmF0YXItSWNvbgpsb2NhbCBUZWxlcG9ydFRhYiA9IFdpbmRvdzpDcmVhdGVUYWIoIlRlbGVwb3J0IiwgMzk0NDY4MDA5NSkgLS0gVGVsZXBvcnQtSWNvbgpsb2NhbCBGYXJtVGFiID0gV2luZG93OkNyZWF0ZVRhYigiRmFybSIsIDYwMzQyODc1OTMpIC0tIEZhcm0tSWNvbgpsb2NhbCBNaXNjVGFiID0gV2luZG93OkNyZWF0ZVRhYigiTWlzYyIsIDk3NDkzMTU1MzApIC0tIEVpbnN0ZWxsdW5nZW4tSWNvbgpsb2NhbCBTZXR0aW5nc1RhYiA9IFdpbmRvdzpDcmVhdGVUYWIoIlNldHRpbmdzIiwgNjAyMzQyNjkxNSkgLS0gWmFobnJhZC1JY29uCgotLSBGdW5rdGlvbmVuIGbDvHIgc3DDpHRlcmUgVmVyd2VuZHVuZwpsb2NhbCBmdW5jdGlvbiBOb3RpZnkodGl0bGUsIGNvbnRlbnQsIGR1cmF0aW9uKQogICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICBUaXRsZSA9IHRpdGxlLAogICAgICAgIENvbnRlbnQgPSBjb250ZW50LAogICAgICAgIER1cmF0aW9uID0gZHVyYXRpb24gb3IgNi41LAogICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OCwKICAgICAgICBBY3Rpb25zID0gewogICAgICAgICAgICBJZ25vcmUgPSB7CiAgICAgICAgICAgICAgICBOYW1lID0gIk9rYXkiLAogICAgICAgICAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgfSwKICAgICAgICB9LAogICAgfSkKZW5kCgotLSBIaWxmc3ZhcmlhYmxlbgpsb2NhbCBQbGF5ZXJzID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikKbG9jYWwgTG9jYWxQbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCmxvY2FsIFJ1blNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKQpsb2NhbCBVc2VySW5wdXRTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikKbG9jYWwgV29ya3NwYWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKQpsb2NhbCBMaWdodGluZyA9IGdhbWU6R2V0U2VydmljZSgiTGlnaHRpbmciKQpsb2NhbCBIdHRwU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiSHR0cFNlcnZpY2UiKQpsb2NhbCBUd2VlblNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlR3ZWVuU2VydmljZSIpCgpsb2NhbCBGbHlFbmFibGVkID0gZmFsc2UKbG9jYWwgTm9jbGlwRW5hYmxlZCA9IGZhbHNlCmxvY2FsIFNwZWVkRW5hYmxlZCA9IGZhbHNlCmxvY2FsIEp1bXBFbmFibGVkID0gZmFsc2UKbG9jYWwgSW5maW5pdGVZaWVsZEVuYWJsZWQgPSBmYWxzZQpsb2NhbCBBbnRpQWZrRW5hYmxlZCA9IGZhbHNlCmxvY2FsIEZ1bGxicmlnaHRFbmFibGVkID0gZmFsc2UKbG9jYWwgRXNwRW5hYmxlZCA9IGZhbHNlCmxvY2FsIEF1dG9DbGlja2VyRW5hYmxlZCA9IGZhbHNlCmxvY2FsIEFudGlWb2lkRW5hYmxlZCA9IGZhbHNlCmxvY2FsIEFudGlTdHVuRW5hYmxlZCA9IGZhbHNlCmxvY2FsIEF1dG9TdG9tcEVuYWJsZWQgPSBmYWxzZQpsb2NhbCBBdXRvRmFybUVuYWJsZWQgPSBmYWxzZQpsb2NhbCBBdXRvQ29sbGVjdEVuYWJsZWQgPSBmYWxzZQpsb2NhbCBBdXRvU2VsbEVuYWJsZWQgPSBmYWxzZQpsb2NhbCBBdXRvQnV5RW5hYmxlZCA9IGZhbHNlCmxvY2FsIEF1dG9RdWVzdEVuYWJsZWQgPSBmYWxzZQpsb2NhbCBBdXRvUmViaXJ0aEVuYWJsZWQgPSBmYWxzZQoKLS1bWwogICAgTUFJTiBUQUIgRlVOS1RJT05FTgpdXS0tCgpsb2NhbCBNYWluU2VjdGlvbiA9IE1haW5UYWI6Q3JlYXRlU2VjdGlvbigiTWFpbiBGZWF0dXJlcyIpCgotLSBBdXRvIFdpbiBCdXR0b24KTWFpblRhYjpDcmVhdGVCdXR0b24oewogICAgTmFtZSA9ICJBdXRvIFdpbiAoU3BpZWwtc3BlemlmaXNjaCkiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgLS0gU3BpZWwtc3BlemlmaXNjaGUgQXV0by1XaW4tTG9naWsgaGllcgogICAgICAgIE5vdGlmeSgiQXV0byBXaW4iLCAiQXR0ZW1wdGluZyB0byB0cmlnZ2VyIGF1dG8gd2luLi4uIikKICAgICAgICAKICAgICAgICAtLSBCZWlzcGllbDogRmluZGUgZGVuIEZpbmlzaC1QYXJ0IHVuZCB0ZWxlcG9ydGllcmUgZGljaCBkb3J0aGluCiAgICAgICAgbG9jYWwgZmluaXNoID0gV29ya3NwYWNlOkZpbmRGaXJzdENoaWxkKCJGaW5pc2giKSBvciBXb3Jrc3BhY2U6RmluZEZpcnN0Q2hpbGQoIldpbiIpCiAgICAgICAgaWYgZmluaXNoIHRoZW4KICAgICAgICAgICAgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOlNldFByaW1hcnlQYXJ0Q0ZyYW1lKGZpbmlzaC5DRnJhbWUgKyBWZWN0b3IzLm5ldygwLCA1LCAwKSkKICAgICAgICAgICAgTm90aWZ5KCJBdXRvIFdpbiIsICJUZWxlcG9ydGVkIHRvIGZpbmlzaCBwb2ludCEiLCAzKQogICAgICAgIGVsc2UKICAgICAgICAgICAgTm90aWZ5KCJBdXRvIFdpbiIsICJObyBmaW5pc2ggcG9pbnQgZm91bmQgaW4gd29ya3NwYWNlIiwgMykKICAgICAgICBlbmQKICAgIGVuZCwKfSkKCi0tIEFudGktQUZLIFRvZ2dsZQpNYWluVGFiOkNyZWF0ZVRvZ2dsZSh7CiAgICBOYW1lID0gIkFudGkgQUZLIiwKICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgRmxhZyA9ICJBbnRpQWZrVG9nZ2xlIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgQW50aUFma0VuYWJsZWQgPSBWYWx1ZQogICAgICAgIGlmIEFudGlBZmtFbmFibGVkIHRoZW4KICAgICAgICAgICAgTm90aWZ5KCJBbnRpIEFGSyIsICJFbmFibGVkIC0gWW91IHdvbid0IGJlIGtpY2tlZCBmb3IgaWRsaW5nIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIFZpcnR1YWxVc2VyID0gZ2FtZTpHZXRTZXJ2aWNlKCJWaXJ0dWFsVXNlciIpCiAgICAgICAgICAgIExvY2FsUGxheWVyLklkbGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgVmlydHVhbFVzZXI6Q2FwdHVyZUNvbnRyb2xsZXIoKQogICAgICAgICAgICAgICAgVmlydHVhbFVzZXI6Q2xpY2tCdXR0b24yKFZlY3RvcjIubmV3KCkpCiAgICAgICAgICAgIGVuZCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIE5vdGlmeSgiQW50aSBBRksiLCAiRGlzYWJsZWQiKQogICAgICAgIGVuZAogICAgZW5kLAp9KQoKLS0gSW5maW5pdGUgWWllbGQgQnV0dG9uCk1haW5UYWI6Q3JlYXRlQnV0dG9uKHsKICAgIE5hbWUgPSAiTG9hZCBJbmZpbml0ZSBZaWVsZCIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBJbmZpbml0ZVlpZWxkRW5hYmxlZCA9IHRydWUKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0VkZ2VJWS9pbmZpbml0ZXlpZWxkL21hc3Rlci9zb3VyY2UnKSkoKQogICAgICAgIE5vdGlmeSgiSW5maW5pdGUgWWllbGQiLCAiQWRtaW4gY29tbWFuZHMgbG9hZGVkISIsIDMpCiAgICBlbmQsCn0pCgotLSBTZXJ2ZXIgSG9wIEJ1dHRvbgpNYWluVGFiOkNyZWF0ZUJ1dHRvbih7CiAgICBOYW1lID0gIlNlcnZlciBIb3AiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgTm90aWZ5KCJTZXJ2ZXIgSG9wIiwgIlNlYXJjaGluZyBmb3IgYSBuZXcgc2VydmVyLi4uIikKICAgICAgICAKICAgICAgICBsb2NhbCBIdHRwID0gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpCiAgICAgICAgbG9jYWwgVFBTID0gZ2FtZTpHZXRTZXJ2aWNlKCJUZWxlcG9ydFNlcnZpY2UiKQogICAgICAgIGxvY2FsIEFQSSA9ICJodHRwczovL2dhbWVzLnJvYmxveC5jb20vdjEvZ2FtZXMvJXMvc2VydmVycy9QdWJsaWM/c29ydE9yZGVyPSVzJmxpbWl0PSVzIgogICAgICAgIAogICAgICAgIGxvY2FsIGZ1bmN0aW9uIFNlcnZlcnMoU2VydmVyVHlwZSkKICAgICAgICAgICAgbG9jYWwgU2VydmVycyA9IHt9CiAgICAgICAgICAgIGxvY2FsIFJlcXVlc3QgPSBIdHRwOkpTT05EZWNvZGUoZ2FtZTpIdHRwR2V0KEFQSTpmb3JtYXQoZ2FtZS5QbGFjZUlkLCAiRGVzYyIsIDEwMCkpKQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIEluZGV4LCBTZXJ2ZXIgaW4gbmV4dCwgUmVxdWVzdC5kYXRhIGRvCiAgICAgICAgICAgICAgICBpZiBTZXJ2ZXIucGxheWluZyB+PSBTZXJ2ZXIubWF4UGxheWVycyBhbmQgU2VydmVyLmlkIH49IGdhbWUuSm9iSWQgdGhlbgogICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChTZXJ2ZXJzLCBTZXJ2ZXIuaWQpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAjU2VydmVycyA+IDAgdGhlbgogICAgICAgICAgICAgICAgVFBTOlRlbGVwb3J0VG9QbGFjZUluc3RhbmNlKGdhbWUuUGxhY2VJZCwgU2VydmVyc1ttYXRoLnJhbmRvbSgxLCAjU2VydmVycyldKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgaWYgbm90IFNlcnZlcnMoKSB0aGVuCiAgICAgICAgICAgIE5vdGlmeSgiU2VydmVyIEhvcCIsICJObyBzZXJ2ZXJzIGZvdW5kLCB0cnlpbmcgYWdhaW4uLi4iKQogICAgICAgICAgICBTZXJ2ZXJzKCkKICAgICAgICBlbmQKICAgIGVuZCwKfSkKCi0tIFJlam9pbiBCdXR0b24KTWFpblRhYjpDcmVhdGVCdXR0b24oewogICAgTmFtZSA9ICJSZWpvaW4gU2VydmVyIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGdhbWU6R2V0U2VydmljZSgiVGVsZXBvcnRTZXJ2aWNlIik6VGVsZXBvcnQoZ2FtZS5QbGFjZUlkLCBMb2NhbFBsYXllcikKICAgICAgICBOb3RpZnkoIlJlam9pbiIsICJBdHRlbXB0aW5nIHRvIHJlam9pbi4uLiIsIDMpCiAgICBlbmQsCn0pCgotLVtbCiAgICBDT01CQVQgVEFCIEZVTktUSU9ORU4KXV0tLQoKbG9jYWwgQ29tYmF0U2VjdGlvbiA9IENvbWJhdFRhYjpDcmVhdGVTZWN0aW9uKCJDb21iYXQgRmVhdHVyZXMiKQoKLS0gS2lsbCBBdXJhIFRvZ2dsZQpDb21iYXRUYWI6Q3JlYXRlVG9nZ2xlKHsKICAgIE5hbWUgPSAiS2lsbCBBdXJhIiwKICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgRmxhZyA9ICJLaWxsQXVyYVRvZ2dsZSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQogICAgICAgIGlmIFZhbHVlIHRoZW4KICAgICAgICAgICAgTm90aWZ5KCJLaWxsIEF1cmEiLCAiRW5hYmxlZCAtIERhbWFnaW5nIG5lYXJieSBwbGF5ZXJzIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIERhbWFnZVBsYXllcihjaGFyYWN0ZXIpCiAgICAgICAgICAgICAgICBpZiBjaGFyYWN0ZXIgYW5kIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyLkh1bWFub2lkOlRha2VEYW1hZ2UoMTApIC0tIEJlaXNwaWVsc2NoYWRlbgogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgd2hpbGUgZ2V0Z2VudigpLktpbGxBdXJhRW5hYmxlZCBkbwogICAgICAgICAgICAgICAgdGFzay53YWl0KDAuNSkKICAgICAgICAgICAgICAgIGZvciBfLCBwbGF5ZXIgaW4gaXBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICAgICAgICAgIGlmIHBsYXllciB+PSBMb2NhbFBsYXllciBhbmQgcGxheWVyLkNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIERhbWFnZVBsYXllcihwbGF5ZXIuQ2hhcmFjdGVyKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgTm90aWZ5KCJLaWxsIEF1cmEiLCAiRGlzYWJsZWQiKQogICAgICAgIGVuZAogICAgICAgIGdldGdlbnYoKS5LaWxsQXVyYUVuYWJsZWQgPSBWYWx1ZQogICAgZW5kLAp9KQoKLS0gQXV0byBDbGlja2VyIFRvZ2dsZQpDb21iYXRUYWI6Q3JlYXRlVG9nZ2xlKHsKICAgIE5hbWUgPSAiQXV0byBDbGlja2VyIiwKICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgRmxhZyA9ICJBdXRvQ2xpY2tlclRvZ2dsZSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQogICAgICAgIEF1dG9DbGlja2VyRW5hYmxlZCA9IFZhbHVlCiAgICAgICAgaWYgQXV0b0NsaWNrZXJFbmFibGVkIHRoZW4KICAgICAgICAgICAgTm90aWZ5KCJBdXRvIENsaWNrZXIiLCAiRW5hYmxlZCAtIEF1dG9tYXRpY2FsbHkgY2xpY2tpbmciKQogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgTW91c2UgPSBMb2NhbFBsYXllcjpHZXRNb3VzZSgpCiAgICAgICAgICAgIGxvY2FsIENsaWNrSW50ZXJ2YWwgPSAwLjEgLS0gS2xpY2tzIHBybyBTZWt1bmRlCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBmdW5jdGlvbiBBdXRvQ2xpY2soKQogICAgICAgICAgICAgICAgaWYgQXV0b0NsaWNrZXJFbmFibGVkIHRoZW4KICAgICAgICAgICAgICAgICAgICBtb3VzZTFjbGljaygpCiAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KENsaWNrSW50ZXJ2YWwpCiAgICAgICAgICAgICAgICAgICAgQXV0b0NsaWNrKCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIEF1dG9DbGljaygpCiAgICAgICAgZWxzZQogICAgICAgICAgICBOb3RpZnkoIkF1dG8gQ2xpY2tlciIsICJEaXNhYmxlZCIpCiAgICAgICAgZW5kCiAgICBlbmQsCn0pCgotLSBIaXRib3ggRXhwYW5kZXIgU2xpZGVyCkNvbWJhdFRhYjpDcmVhdGVTbGlkZXIoewogICAgTmFtZSA9ICJIaXRib3ggRXhwYW5kZXIiLAogICAgUmFuZ2UgPSB7MSwgMjB9LAogICAgSW5jcmVtZW50ID0gMSwKICAgIFN1ZmZpeCA9ICJTdHVkcyIsCiAgICBDdXJyZW50VmFsdWUgPSAxLAogICAgRmxhZyA9ICJIaXRib3hTbGlkZXIiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihWYWx1ZSkKICAgICAgICBmb3IgXywgcGxheWVyIGluIGlwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgaWYgcGxheWVyIH49IExvY2FsUGxheWVyIGFuZCBwbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgICAgIGZvciBfLCBwYXJ0IGluIGlwYWlycyhwbGF5ZXIuQ2hhcmFjdGVyOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgcGFydDpJc0EoIkJhc2VQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0LlNpemUgPSBWZWN0b3IzLm5ldyhWYWx1ZSwgVmFsdWUsIFZhbHVlKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIE5vdGlmeSgiSGl0Ym94IEV4cGFuZGVyIiwgIlNldCB0byAiIC4uIFZhbHVlIC4uICIgc3R1ZHMiLCAzKQogICAgZW5kLAp9KQoKLS0gQW50aSBTdHVuIFRvZ2dsZQpDb21iYXRUYWI6Q3JlYXRlVG9nZ2xlKHsKICAgIE5hbWUgPSAiQW50aSBTdHVuIiwKICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgRmxhZyA9ICJBbnRpU3R1blRvZ2dsZSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQogICAgICAgIEFudGlTdHVuRW5hYmxlZCA9IFZhbHVlCiAgICAgICAgaWYgQW50aVN0dW5FbmFibGVkIHRoZW4KICAgICAgICAgICAgTm90aWZ5KCJBbnRpIFN0dW4iLCAiRW5hYmxlZCAtIFlvdSB3b24ndCBiZSBzdHVubmVkIikKICAgICAgICAgICAgCiAgICAgICAgICAgIExvY2FsUGxheWVyLkNoYXJhY3RlckFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oY2hhcmFjdGVyKQogICAgICAgICAgICAgICAgbG9jYWwgaHVtYW5vaWQgPSBjaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIpCiAgICAgICAgICAgICAgICBodW1hbm9pZC5TdGF0dXNDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oXywgbmV3U3RhdHVzKQogICAgICAgICAgICAgICAgICAgIGlmIG5ld1N0YXR1cyA9PSBFbnVtLkh1bWFub2lkU3RhdHVzVHlwZS5TdHVubmVkIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaHVtYW5vaWQ6Q2hhbmdlU3RhdGUoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5SdW5uaW5nKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICBlbmQpCiAgICAgICAgZWxzZQogICAgICAgICAgICBOb3RpZnkoIkFudGkgU3R1biIsICJEaXNhYmxlZCIpCiAgICAgICAgZW5kCiAgICBlbmQsCn0pCgotLVtbCiAgICBQTEFZRVIgVEFCIEZVTktUSU9ORU4KXV0tLQoKbG9jYWwgUGxheWVyU2VjdGlvbiA9IFBsYXllclRhYjpDcmVhdGVTZWN0aW9uKCJQbGF5ZXIgTW9kaWZpY2F0aW9ucyIpCgotLSBGbHkgVG9nZ2xlClBsYXllclRhYjpDcmVhdGVUb2dnbGUoewogICAgTmFtZSA9ICJGbHkiLAogICAgQ3VycmVudFZhbHVlID0gZmFsc2UsCiAgICBGbGFnID0gIkZseVRvZ2dsZSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQogICAgICAgIEZseUVuYWJsZWQgPSBWYWx1ZQogICAgICAgIGlmIEZseUVuYWJsZWQgdGhlbgogICAgICAgICAgICBOb3RpZnkoIkZseSIsICJFbmFibGVkIC0gUHJlc3MgRSB0byB0b2dnbGUiKQogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgRmx5U3BlZWQgPSA1MAogICAgICAgICAgICBsb2NhbCBDb250cm9sID0ge0ZseWluZyA9IGZhbHNlfQogICAgICAgICAgICBsb2NhbCBUb2dnbGVLZXkgPSBFbnVtLktleUNvZGUuRQogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gRmx5KCkKICAgICAgICAgICAgICAgIGxvY2FsIENoYXJhY3RlciA9IExvY2FsUGxheWVyLkNoYXJhY3RlciBvciBMb2NhbFBsYXllci5DaGFyYWN0ZXJBZGRlZDpXYWl0KCkKICAgICAgICAgICAgICAgIGxvY2FsIEh1bWFub2lkID0gQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKQogICAgICAgICAgICAgICAgSHVtYW5vaWQuUGxhdGZvcm1TdGFuZCA9IHRydWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbG9jYWwgQm9keUd5cm8gPSBJbnN0YW5jZS5uZXcoIkJvZHlHeXJvIiwgQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQpCiAgICAgICAgICAgICAgICBsb2NhbCBCb2R5VmVsb2NpdHkgPSBJbnN0YW5jZS5uZXcoIkJvZHlWZWxvY2l0eSIsIENoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBCb2R5R3lyby5QID0gOWU0CiAgICAgICAgICAgICAgICBCb2R5R3lyby5tYXhUb3JxdWUgPSBWZWN0b3IzLm5ldyg5ZTksIDllOSwgOWU5KQogICAgICAgICAgICAgICAgQm9keUd5cm8uY2ZyYW1lID0gQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lCiAgICAgICAgICAgICAgICBCb2R5VmVsb2NpdHkudmVsb2NpdHkgPSBWZWN0b3IzLm5ldygwLCAwLCAwKQogICAgICAgICAgICAgICAgQm9keVZlbG9jaXR5Lm1heEZvcmNlID0gVmVjdG9yMy5uZXcoOWU5LCA5ZTksIDllOSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgVXNlcklucHV0U2VydmljZS5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oSW5wdXQsIFByb2Nlc3NlZCkKICAgICAgICAgICAgICAgICAgICBpZiBub3QgUHJvY2Vzc2VkIGFuZCBJbnB1dC5LZXlDb2RlID09IFRvZ2dsZUtleSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRyb2wuRmx5aW5nID0gbm90IENvbnRyb2wuRmx5aW5nCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFVwZGF0ZUZseSgpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IEZseUVuYWJsZWQgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgQ29udHJvbC5GbHlpbmcgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBCb2R5VmVsb2NpdHkuVmVsb2NpdHkgPSBDaGFyYWN0ZXIuSHVtYW5vaWQuTW92ZURpcmVjdGlvbiAqIEZseVNwZWVkCiAgICAgICAgICAgICAgICAgICAgICAgIEJvZHlHeXJvLkNGcmFtZSA9IFdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNvb3JkaW5hdGVGcmFtZQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgQm9keVZlbG9jaXR5LlZlbG9jaXR5ID0gVmVjdG9yMy5uZXcoMCwgMCwgMCkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBSdW5TZXJ2aWNlLkhlYXJ0YmVhdDpDb25uZWN0KFVwZGF0ZUZseSkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KEZseSkKICAgICAgICAgICAgaWYgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIHRoZW4gRmx5KCkgZW5kCiAgICAgICAgZWxzZQogICAgICAgICAgICBOb3RpZnkoIkZseSIsICJEaXNhYmxlZCIpCiAgICAgICAgICAgIGlmIExvY2FsUGxheWVyLkNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBIdW1hbm9pZCA9IExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICAgICAgICAgIGlmIEh1bWFub2lkIHRoZW4gSHVtYW5vaWQuUGxhdGZvcm1TdGFuZCA9IGZhbHNlIGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBSb290ID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICAgICAgICAgIGlmIFJvb3QgdGhlbgogICAgICAgICAgICAgICAgICAgIGZvciBfLCB2IGluIGlwYWlycyhSb290OkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHY6SXNBKCJCb2R5VmVsb2NpdHkiKSBvciB2OklzQSgiQm9keUd5cm8iKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2OkRlc3Ryb3koKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZCwKfSkKCi0tIFNwZWVkIFNsaWRlcgpQbGF5ZXJUYWI6Q3JlYXRlU2xpZGVyKHsKICAgIE5hbWUgPSAiU3BlZWQiLAogICAgUmFuZ2UgPSB7MTYsIDIwMH0sCiAgICBJbmNyZW1lbnQgPSAxLAogICAgU3VmZml4ID0gIlN0dWRzL3MiLAogICAgQ3VycmVudFZhbHVlID0gMTYsCiAgICBGbGFnID0gIlNwZWVkU2xpZGVyIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgU3BlZWRFbmFibGVkID0gdHJ1ZQogICAgICAgIGlmIExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKSB0aGVuCiAgICAgICAgICAgIExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikuV2Fsa1NwZWVkID0gVmFsdWUKICAgICAgICBlbmQKICAgICAgICBOb3RpZnkoIlNwZWVkIiwgIlNldCB0byAiIC4uIFZhbHVlIC4uICIgc3R1ZHMvcyIsIDMpCiAgICBlbmQsCn0pCgotLSBKdW1wIFBvd2VyIFNsaWRlcgpQbGF5ZXJUYWI6Q3JlYXRlU2xpZGVyKHsKICAgIE5hbWUgPSAiSnVtcCBQb3dlciIsCiAgICBSYW5nZSA9IHs1MCwgMjAwfSwKICAgIEluY3JlbWVudCA9IDEsCiAgICBTdWZmaXggPSAiU3R1ZHMiLAogICAgQ3VycmVudFZhbHVlID0gNTAsCiAgICBGbGFnID0gIkp1bXBTbGlkZXIiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihWYWx1ZSkKICAgICAgICBKdW1wRW5hYmxlZCA9IHRydWUKICAgICAgICBpZiBMb2NhbFBsYXllci5DaGFyYWN0ZXIgYW5kIExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikgdGhlbgogICAgICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpLkp1bXBQb3dlciA9IFZhbHVlCiAgICAgICAgZW5kCiAgICAgICAgTm90aWZ5KCJKdW1wIFBvd2VyIiwgIlNldCB0byAiIC4uIFZhbHVlIC4uICIgc3R1ZHMiLCAzKQogICAgZW5kLAp9KQoKLS0gTm9jbGlwIFRvZ2dsZQpQbGF5ZXJUYWI6Q3JlYXRlVG9nZ2xlKHsKICAgIE5hbWUgPSAiTm9jbGlwIiwKICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgRmxhZyA9ICJOb2NsaXBUb2dnbGUiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihWYWx1ZSkKICAgICAgICBOb2NsaXBFbmFibGVkID0gVmFsdWUKICAgICAgICBpZiBOb2NsaXBFbmFibGVkIHRoZW4KICAgICAgICAgICAgTm90aWZ5KCJOb2NsaXAiLCAiRW5hYmxlZCAtIFlvdSBjYW4gd2FsayB0aHJvdWdoIHdhbGxzIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIE5vY2xpcExvb3AoKQogICAgICAgICAgICAgICAgaWYgTm9jbGlwRW5hYmxlZCBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3IgXywgY2hpbGQgaW4gaXBhaXJzKExvY2FsUGxheWVyLkNoYXJhY3RlcjpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiBjaGlsZDpJc0EoIkJhc2VQYXJ0IikgYW5kIGNoaWxkLkNhbkNvbGxpZGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuQ2FuQ29sbGlkZSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgTm9jbGlwQ29ubmVjdGlvbiA9IFJ1blNlcnZpY2UuU3RlcHBlZDpDb25uZWN0KE5vY2xpcExvb3ApCiAgICAgICAgICAgIAogICAgICAgICAgICAtLSBWZXJiaW5kdW5nIGF1ZnLDpHVtZW4gd2VubiBOb2NsaXAgZGVha3RpdmllcnQgd2lyZAogICAgICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGlmIG5vdCBOb2NsaXBFbmFibGVkIGFuZCBOb2NsaXBDb25uZWN0aW9uIHRoZW4KICAgICAgICAgICAgICAgICAgICBOb2NsaXBDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIE5vdGlmeSgiTm9jbGlwIiwgIkRpc2FibGVkIikKICAgICAgICBlbmQKICAgIGVuZCwKfSkKCi0tW1sKICAgIFRFTEVQT1JUIFRBQiBGVU5LVElPTkVOCl1dLS0KCmxvY2FsIFRlbGVwb3J0U2VjdGlvbiA9IFRlbGVwb3J0VGFiOkNyZWF0ZVNlY3Rpb24oIlRlbGVwb3J0IExvY2F0aW9ucyIpCgotLSBUZWxlcG9ydCB6dSBTcGllbGVyIERyb3Bkb3duCmxvY2FsIFBsYXllckRyb3Bkb3duID0gVGVsZXBvcnRUYWI6Q3JlYXRlRHJvcGRvd24oewogICAgTmFtZSA9ICJUZWxlcG9ydCB0byBQbGF5ZXIiLAogICAgT3B0aW9ucyA9IHt9LAogICAgQ3VycmVudE9wdGlvbiA9ICIiLAogICAgRmxhZyA9ICJQbGF5ZXJUZWxlcG9ydERyb3Bkb3duIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oT3B0aW9uKQogICAgICAgIGxvY2FsIFRhcmdldFBsYXllciA9IFBsYXllcnNbT3B0aW9uXQogICAgICAgIGlmIFRhcmdldFBsYXllciBhbmQgVGFyZ2V0UGxheWVyLkNoYXJhY3RlciBhbmQgVGFyZ2V0UGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4KICAgICAgICAgICAgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOlNldFByaW1hcnlQYXJ0Q0ZyYW1lKFRhcmdldFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUpCiAgICAgICAgICAgIE5vdGlmeSgiVGVsZXBvcnQiLCAiVGVsZXBvcnRlZCB0byAiIC4uIE9wdGlvbiwgMykKICAgICAgICBlbmQKICAgIGVuZCwKfSkKCi0tIFNwaWVsZXJsaXN0ZSBha3R1YWxpc2llcmVuCmxvY2FsIGZ1bmN0aW9uIFVwZGF0ZVBsYXllckxpc3QoKQogICAgbG9jYWwgUGxheWVyTmFtZXMgPSB7fQogICAgZm9yIF8sIFBsYXllciBpbiBpcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgaWYgUGxheWVyIH49IExvY2FsUGxheWVyIHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KFBsYXllck5hbWVzLCBQbGF5ZXIuTmFtZSkKICAgICAgICBlbmQKICAgIGVuZAogICAgUGxheWVyRHJvcGRvd246UmVmcmVzaChQbGF5ZXJOYW1lcywgdHJ1ZSkKZW5kCgpQbGF5ZXJzLlBsYXllckFkZGVkOkNvbm5lY3QoVXBkYXRlUGxheWVyTGlzdCkKUGxheWVycy5QbGF5ZXJSZW1vdmluZzpDb25uZWN0KFVwZGF0ZVBsYXllckxpc3QpClVwZGF0ZVBsYXllckxpc3QoKQoKLS0gVGVsZXBvcnQgenUgU3Bhd24gQnV0dG9uClRlbGVwb3J0VGFiOkNyZWF0ZUJ1dHRvbih7CiAgICBOYW1lID0gIlRlbGVwb3J0IHRvIFNwYXduIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvY2FsIFNwYXduID0gV29ya3NwYWNlOkZpbmRGaXJzdENoaWxkKCJTcGF3blBvaW50Iikgb3IgV29ya3NwYWNlOkZpbmRGaXJzdENoaWxkKCJTcGF3biIpCiAgICAgICAgaWYgU3Bhd24gdGhlbgogICAgICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXI6U2V0UHJpbWFyeVBhcnRDRnJhbWUoU3Bhd24uQ0ZyYW1lKQogICAgICAgICAgICBOb3RpZnkoIlRlbGVwb3J0IiwgIlRlbGVwb3J0ZWQgdG8gc3Bhd24iLCAzKQogICAgICAgIGVsc2UKICAgICAgICAgICAgTm90aWZ5KCJUZWxlcG9ydCIsICJObyBzcGF3biBwb2ludCBmb3VuZCIsIDMpCiAgICAgICAgZW5kCiAgICBlbmQsCn0pCgotLVtbCiAgICBGQVJNIFRBQiBGVU5LVElPTkVOCl1dLS0KCmxvY2FsIEZhcm1TZWN0aW9uID0gRmFybVRhYjpDcmVhdGVTZWN0aW9uKCJGYXJtaW5nIEZlYXR1cmVzIikKCi0tIEF1dG8gRmFybSBUb2dnbGUKRmFybVRhYjpDcmVhdGVUb2dnbGUoewogICAgTmFtZSA9ICJBdXRvIEZhcm0iLAogICAgQ3VycmVudFZhbHVlID0gZmFsc2UsCiAgICBGbGFnID0gIkF1dG9GYXJtVG9nZ2xlIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgQXV0b0Zhcm1FbmFibGVkID0gVmFsdWUKICAgICAgICBpZiBBdXRvRmFybUVuYWJsZWQgdGhlbgogICAgICAgICAgICBOb3RpZnkoIkF1dG8gRmFybSIsICJFbmFibGVkIC0gRmFybWluZyBhdXRvbWF0aWNhbGx5IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHdoaWxlIEF1dG9GYXJtRW5hYmxlZCBkbwogICAgICAgICAgICAgICAgdGFzay53YWl0KCkKICAgICAgICAgICAgICAgIC0tIEJlaXNwaWVsLUZhcm0tTG9naWs6IEZpbmRlIGRlbiBuw6RjaHN0ZW4gR2VnbmVyIHVuZCBncmVpZmUgYW4KICAgICAgICAgICAgICAgIGxvY2FsIGNsb3Nlc3RFbmVteSwgY2xvc2VzdERpc3RhbmNlID0gbmlsLCBtYXRoLmh1Z2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZm9yIF8sIGVuZW15IGluIGlwYWlycyhXb3Jrc3BhY2U6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBlbmVteTpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKSBhbmQgZW5lbXk6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGRpc3RhbmNlID0gKExvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uIC0gZW5lbXkuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbikuTWFnbml0dWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRpc3RhbmNlIDwgY2xvc2VzdERpc3RhbmNlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3RFbmVteSA9IGVuZW15CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZXN0RGlzdGFuY2UgPSBkaXN0YW5jZQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBjbG9zZXN0RW5lbXkgdGhlbgogICAgICAgICAgICAgICAgICAgIExvY2FsUGxheWVyLkNoYXJhY3RlcjpTZXRQcmltYXJ5UGFydENGcmFtZShjbG9zZXN0RW5lbXkuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgKiBDRnJhbWUubmV3KDAsIDAsIC0zKSkKICAgICAgICAgICAgICAgICAgICBpZiBjbG9zZXN0RW5lbXkuSHVtYW5vaWQuSGVhbHRoID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Nlc3RFbmVteS5IdW1hbm9pZDpUYWtlRGFtYWdlKDEwKSAtLSBCZWlzcGllbHNjaGFkZW4KICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIE5vdGlmeSgiQXV0byBGYXJtIiwgIkRpc2FibGVkIikKICAgICAgICBlbmQKICAgIGVuZCwKfSkKCi0tIEF1dG8gQ29sbGVjdCBUb2dnbGUKRmFybVRhYjpDcmVhdGVUb2dnbGUoewogICAgTmFtZSA9ICJBdXRvIENvbGxlY3QgSXRlbXMiLAogICAgQ3VycmVudFZhbHVlID0gZmFsc2UsCiAgICBGbGFnID0gIkF1dG9Db2xsZWN0VG9nZ2xlIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgQXV0b0NvbGxlY3RFbmFibGVkID0gVmFsdWUKICAgICAgICBpZiBBdXRvQ29sbGVjdEVuYWJsZWQgdGhlbgogICAgICAgICAgICBOb3RpZnkoIkF1dG8gQ29sbGVjdCIsICJFbmFibGVkIC0gQ29sbGVjdGluZyBpdGVtcyBhdXRvbWF0aWNhbGx5IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHdoaWxlIEF1dG9Db2xsZWN0RW5hYmxlZCBkbwogICAgICAgICAgICAgICAgdGFzay53YWl0KDAuNSkKICAgICAgICAgICAgICAgIGZvciBfLCBpdGVtIGluIGlwYWlycyhXb3Jrc3BhY2U6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBpdGVtOklzQSgiQmFzZVBhcnQiKSBhbmQgaXRlbS5OYW1lOmZpbmQoIkNvaW4iKSBvciBpdGVtLk5hbWU6ZmluZCgiR2VtIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmaXJldG91Y2hpbnRlcmVzdChMb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydCwgaXRlbSwgMCkKICAgICAgICAgICAgICAgICAgICAgICAgZmlyZXRvdWNoaW50ZXJlc3QoTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQsIGl0ZW0sIDEpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZQogICAgICAgICAgICBOb3RpZnkoIkF1dG8gQ29sbGVjdCIsICJEaXNhYmxlZCIpCiAgICAgICAgZW5kCiAgICBlbmQsCn0pCgotLVtbCiAgICBNSVNDIFRBQiBGVU5LVElPTkVOCl1dLS0KCmxvY2FsIE1pc2NTZWN0aW9uID0gTWlzY1RhYjpDcmVhdGVTZWN0aW9uKCJNaXNjZWxsYW5lb3VzIEZlYXR1cmVzIikKCi0tIEVTUCBUb2dnbGUKTWlzY1RhYjpDcmVhdGVUb2dnbGUoewogICAgTmFtZSA9ICJFU1AiLAogICAgQ3VycmVudFZhbHVlID0gZmFsc2UsCiAgICBGbGFnID0gIkVzcFRvZ2dsZSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQogICAgICAgIEVzcEVuYWJsZWQgPSBWYWx1ZQogICAgICAgIGlmIEVzcEVuYWJsZWQgdGhlbgogICAgICAgICAgICBOb3RpZnkoIkVTUCIsICJFbmFibGVkIC0gU2hvd2luZyBwbGF5ZXIgb3V0bGluZXMiKQogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gQ3JlYXRlRXNwKHBsYXllcikKICAgICAgICAgICAgICAgIGlmIHBsYXllciB+PSBMb2NhbFBsYXllciB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgY2hhcmFjdGVyID0gcGxheWVyLkNoYXJhY3RlciBvciBwbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6V2FpdCgpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgaGlnaGxpZ2h0ID0gSW5zdGFuY2UubmV3KCJIaWdobGlnaHQiKQogICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodC5OYW1lID0gcGxheWVyLk5hbWUgLi4gIl9FU1AiCiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0Lk91dGxpbmVUcmFuc3BhcmVuY3kgPSAwCiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0LkZpbGxUcmFuc3BhcmVuY3kgPSAwLjUKICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHQuT3V0bGluZUNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKQogICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodC5QYXJlbnQgPSBjaGFyYWN0ZXIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbihuZXdDaGFyKQogICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgRXNwRW5hYmxlZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBuZXdIaWdobGlnaHQgPSBoaWdobGlnaHQ6Q2xvbmUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SGlnaGxpZ2h0LlBhcmVudCA9IG5ld0NoYXIKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIF8sIHBsYXllciBpbiBpcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgICAgICBDcmVhdGVFc3AocGxheWVyKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIFBsYXllcnMuUGxheWVyQWRkZWQ6Q29ubmVjdChDcmVhdGVFc3ApCiAgICAgICAgZWxzZQogICAgICAgICAgICBOb3RpZnkoIkVTUCIsICJEaXNhYmxlZCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgXywgcGxheWVyIGluIGlwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgICAgIGlmIHBsYXllci5DaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGhpZ2hsaWdodCA9IHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQocGxheWVyLk5hbWUgLi4gIl9FU1AiKQogICAgICAgICAgICAgICAgICAgIGlmIGhpZ2hsaWdodCB0aGVuIGhpZ2hsaWdodDpEZXN0cm95KCkgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQsCn0pCgotLSBGdWxsYnJpZ2h0IFRvZ2dsZQpNaXNjVGFiOkNyZWF0ZVRvZ2dsZSh7CiAgICBOYW1lID0gIkZ1bGxicmlnaHQiLAogICAgQ3VycmVudFZhbHVlID0gZmFsc2UsCiAgICBGbGFnID0gIkZ1bGxicmlnaHRUb2dnbGUiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihWYWx1ZSkKICAgICAgICBGdWxsYnJpZ2h0RW5hYmxlZCA9IFZhbHVlCiAgICAgICAgaWYgRnVsbGJyaWdodEVuYWJsZWQgdGhlbgogICAgICAgICAgICBOb3RpZnkoIkZ1bGxicmlnaHQiLCAiRW5hYmxlZCAtIFdvcmxkIGlzIGZ1bGx5IGxpdCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBMaWdodGluZy5BbWJpZW50ID0gQ29sb3IzLm5ldygxLCAxLCAxKQogICAgICAgICAgICBMaWdodGluZy5Db2xvclNoaWZ0X0JvdHRvbSA9IENvbG9yMy5uZXcoMSwgMSwgMSkKICAgICAgICAgICAgTGlnaHRpbmcuQ29sb3JTaGlmdF9Ub3AgPSBDb2xvcjMubmV3KDEsIDEsIDEpCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBmdW5jdGlvbiBicmlnaHRlbigpCiAgICAgICAgICAgICAgICBpZiBub3QgRnVsbGJyaWdodEVuYWJsZWQgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgICAgICBMaWdodGluZy5HbG9iYWxTaGFkb3dzID0gZmFsc2UKICAgICAgICAgICAgICAgIExpZ2h0aW5nLkJyaWdodG5lc3MgPSAyCiAgICAgICAgICAgICAgICB0YXNrLndhaXQoMSkKICAgICAgICAgICAgICAgIGJyaWdodGVuKCkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBicmlnaHRlbigpCiAgICAgICAgZWxzZQogICAgICAgICAgICBOb3RpZnkoIkZ1bGxicmlnaHQiLCAiRGlzYWJsZWQiKQogICAgICAgICAgICBMaWdodGluZy5BbWJpZW50ID0gQ29sb3IzLm5ldygwLjUsIDAuNSwgMC41KQogICAgICAgICAgICBMaWdodGluZy5Db2xvclNoaWZ0X0JvdHRvbSA9IENvbG9yMy5uZXcoMCwgMCwgMCkKICAgICAgICAgICAgTGlnaHRpbmcuQ29sb3JTaGlmdF9Ub3AgPSBDb2xvcjMubmV3KDAsIDAsIDApCiAgICAgICAgICAgIExpZ2h0aW5nLkdsb2JhbFNoYWRvd3MgPSB0cnVlCiAgICAgICAgICAgIExpZ2h0aW5nLkJyaWdodG5lc3MgPSAxCiAgICAgICAgZW5kCiAgICBlbmQsCn0pCgotLVtbCiAgICBTRVRUSU5HUyBUQUIgRlVOS1RJT05FTgpdXS0tCgpsb2NhbCBVSVNldHRpbmdzID0gU2V0dGluZ3NUYWI6Q3JlYXRlU2VjdGlvbigiVUkgU2V0dGluZ3MiKQoKLS0gVUkgVG9nZ2xlIEtleWJpbmQKU2V0dGluZ3NUYWI6Q3JlYXRlS2V5YmluZCh7CiAgICBOYW1lID0gIlVJIFRvZ2dsZSBLZXliaW5kIiwKICAgIEN1cnJlbnRLZXliaW5kID0gIlJpZ2h0U2hpZnQiLAogICAgSG9sZFRvSW50ZXJhY3QgPSBmYWxzZSwKICAgIEZsYWcgPSAiVUlLZXliaW5kVG9nZ2xlIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oS2V5YmluZCkKICAgICAgICBXaW5kb3c6VG9nZ2xlKEtleWJpbmQpCiAgICBlbmQsCn0pCgotLSBVSSBDb2xvciBQaWNrZXIKU2V0dGluZ3NUYWI6Q3JlYXRlQ29sb3JwaWNrZXIoewogICAgTmFtZSA9ICJVSSBDb2xvciIsCiAgICBDb2xvciA9IENvbG9yMy5mcm9tUkdCKDAsIDI1NSwgMjU1KSwKICAgIEZsYWcgPSAiVUlDb2xvclBpY2tlciIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKENvbG9yKQogICAgICAgIFdpbmRvdzpDaGFuZ2VDb2xvcihDb2xvcikKICAgIGVuZAp9KQoKLS0gRGVzdHJveSBVSSBCdXR0b24KU2V0dGluZ3NUYWI6Q3JlYXRlQnV0dG9uKHsKICAgIE5hbWUgPSAiRGVzdHJveSBVSSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBSYXlmaWVsZDpEZXN0cm95KCkKICAgICAgICBOb3RpZnkoIlVJIERlc3Ryb3llZCIsICJUaGUgVUkgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGRlc3Ryb3llZCIsIDMpCiAgICBlbmQsCn0pCgotLSBOYWNocmljaHQgYmVpbSBMYWRlbgpOb3RpZnkoIlByZW1pdW0gSHViIiwgIlN1Y2Nlc3NmdWxseSBsb2FkZWQhIFdlbGNvbWUgIiAuLiBMb2NhbFBsYXllci5OYW1lLCA1KQ=='
local t={}
for i=1,#b do t[string.sub(b,i,i)] = i-1 end
local function decode(data)
  local bytes = {}
  local temp = 0
  local bits = 0
  for i=1,#data do
    local c = t[string.sub(data,i,i)]
    if c ~= nil then
      temp = temp * 64 + c
      bits = bits + 6
      if bits >= 8 then
        bits = bits - 8
        table.insert(bytes, math.floor(temp / 2^bits) % 256)
      end
    end
  end
  local chars = {}
  for i,v in ipairs(bytes) do chars[i] = string.char(v) end
  return table.concat(chars)
end

local decoded_script = decode(s)

-- Hier kannst du decoded_script nutzen oder ausgeben
return decoded_script
